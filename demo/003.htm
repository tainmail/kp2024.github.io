<!DOCTYPE html><html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>貪吃蛇小遊戲</title>
    <style>
		
		#game_title {
		  margin-left: 95px;
		}
		#canvas {
		  border: 1px solid #000000; 
		}
		#score {
		 
		}
		#mode_form {
		 
		}
		#game_over {
		  display: none; 
		 
		  width: 280px;
		  height: 160px;
		  border: 1px solid #000; 
		}
		#btn_replay {}
		#btn_cancel {}
    </style>
  </head>
  <body>
   
    <canvas id="canvas" width="400" height="400"></canvas>
	
	<div id="game_over">
		<h3>遊戲結束！</h3>
		<h3 id="game_over_score">您的最終得分為: 0分</h3>
		<button id="btn_replay">REPLAY</button>
		<button id="btn_cancel">取消</button>
	</div>
	
	
    
    <p id="score">目前得分: 0分</p>
   
    <br />
    <button id="btn_play">開始 / 繼續</button>
    <button id="btn_pause">暫停</button>
    <button id="btn_resume">重新開始</button>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.3/jquery.js"></script>
	
	<script>
	$(function(){
		const canvas = document.getElementById("canvas");
		const ctx = canvas.getContext("2d");

		

		let $btnPlay = $("#btn_play");
		let $btnPause = $("#btn_pause");

		let $btnResume = $("#btn_resume");

		let $btnReplay = $("#btn_replay");

		let $btnCancel = $("#btn_cancel");


		//const elBtnCancel = document.getElementById("btn_cancel");
		const game_over_p = document.getElementById("game_over");
		const game_over_score = document.getElementById("game_over_score");

		const score_cal = document.getElementById("score");
		const mode_item = document.getElementsByName("mode");

	

		//注意要改為var const是不會修改的
		var snake = [41, 40]; // 蛇身體佇列
		var direction = 1; // 方向：1為向右，-1為向左，20為向下，-20為向上
		var food = 42; // 食物位置，取值為0~399
		var n; // 蛇的下一步的方向（由鍵盤和蛇的原方向決定）
		var score = -1; // 得分
		var time_internal = 500; //蛇的速度

		let enabled = true; // 用於控制是否重新整理，實現通過一定頻率重新整理
		let run_id; // 請求ID，用於暫停功能

		// 產生min~max的隨機整數，用於隨機產生食物的位置
		function random(min, max) {
			const num = Math.floor(Math.random() * (max - min)) + min;
			return num;
		}

		// 用於繪製蛇或者是食物代表的方塊，seat為方塊位置，取值為0~399，color為顏色
		function fnDraw(seat, color) {
			ctx.fillStyle = color; // 填充顏色
			// fillRect的四個引數分別表示要繪製方塊的x座標，y座標，長，寬，這裡為了美觀留了1px用於邊框
			ctx.fillRect(
				(seat % 20) * 20 + 1,
				Math.floor(seat / 20) * 20 + 1,
				18,
				18
			);
		}

	

		// 用於繫結鍵盤上下左右事件，我設定了wsad，或者ijkl，或者上下左右方向鍵，代表上下左右方向
		$(document).on("keydown", function(){
			const keycode = event.keyCode;
			switch (keycode) {
				case 38: // 上箭頭
					direction = direction === 20 ? direction : -20;
					break;
				case 39: // 右箭頭
					direction = direction === -1 ? direction : 1;
					break;
				case 40: // 下箭頭
					direction = direction === -20 ? direction : 20;
					break;
				case 37: // 左箭頭
					direction = direction === 1 ? direction : -1;
					break;
				default:
					// 其他按鍵不做處理
					break;
			}
		});
		


		// 用於初始化遊戲各項引數
		function fnInit() {
			snake = [41, 40]; 
			direction = 1; 
			food = 42;
			score = -1; 
			time_internal = 500;
			enabled = true;
			score_cal.innerText = "目前得分: 0分"; // 更新得分
		}

		function fnGameOver(){
			cancelAnimationFrame(run_id);
			game_over_score.innerText = "您的最終得分為: " + score + "分";
			game_over_p.style.display = "block";
		}

		// 啟動或繼續遊戲
		function run_game() {
			n = snake[0] + direction; // 找到新蛇頭座標
			snake.unshift(n); // 新增新蛇頭
			// 判斷蛇頭是否撞到自己或者是否超出邊界
			if (
				snake.indexOf(n, 1) > 0 ||
				n < 0 ||
				n > 399 ||
				(direction == 1 && n % 20 == 0) ||
				(direction == -1 && n % 20 == 19)
			) {
				fnGameOver();
			}
			fnDraw(n, "#1a8dcc"); // 繪製新蛇頭為淺藍色
			fnDraw(snake[1], "#cececc"); // 將原來的蛇頭（淺藍色）變成蛇身（淺灰色）
			if (n == food) {
				score = score + 1;
				score_cal.innerText = "目前得分: " + score; // 更新得分
				while (snake.indexOf((food = random(0, 400))) >= 0); // 重新重新整理食物，注意食物應不在蛇內部
				fnDraw(food, "Yellow"); // 繪製食物
			} else {
				fnDraw(snake.pop(), "White"); // 將原來的蛇尾繪製成白色
			}
			
		}

		// 控制遊戲的重新整理頻率,每隔time_internal時間間隔重新整理一次
		function fnGameControl(){
			if(enabled){
				enabled = false;
				requestAnimationFrame(run_game);
				setTimeout(() => enabled = true, time_internal);
			}
			run_id = requestAnimationFrame(fnGameControl);
		}

		// 按鈕 開始
		$btnPlay.on("click", function(){
			run_id = requestAnimationFrame(fnGameControl);
		});

		//按鈕 暫停
		$btnPause.on("click", function(){
			cancelAnimationFrame(run_id);
		});

		//按鈕 繼續
		$btnResume.on("click", function(){
			cancelAnimationFrame(run_id);
			// 將原有的食物和蛇的方塊都繪製成白色
			for(var i = 0; i < snake.length; i++){
				fnDraw(snake[i], "White");
			}
			fnDraw(food, "White");
			// 初始化遊戲各項引數
			fnInit();
			run_id = requestAnimationFrame(fnGameControl);		
		});


		//按鈕 取消
		$btnCancel.on("click", function(){
			for(var i = 0; i < snake.length; i++){
				fnDraw(snake[i], "White");
			}
			fnDraw(food, "White");
			fnInit();
			game_over_p.style.display = "none";
		});



		//按鈕 重玩
		$btnReplay.on("click", function(){
			for(var i = 0; i < snake.length; i++){
				fnDraw(snake[i], "White");
			}
			fnDraw(food, "White");
			fnInit();
			game_over_p.style.display = "none";
			run_id = requestAnimationFrame(fnGameControl);
		});

		
	});
	</script>

   
  </body></html>